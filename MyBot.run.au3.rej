diff a/MyBot.run.au3 b/MyBot.run.au3	(rejected hunks)
@@ -18,10 +18,7 @@
 ;#AutoIt3Wrapper_Run_AU3Check=n ; enable when running in folder with umlauts!
 #AutoIt3Wrapper_Run_Au3Stripper=y
 #Au3Stripper_Parameters=/rsln /MI=3
-;/SV=0
 
-;#AutoIt3Wrapper_Change2CUI=y
-;#pragma compile(Console, true)
 #include "MyBot.run.version.au3"
 #pragma compile(ProductName, My Bot)
 #pragma compile(Out, MyBot.run.exe) ; Required
@@ -677,143 +702,113 @@ Func runBot() ;Bot that runs everything in order
 	FirstCheck()
 
 	While 1
-		;Check for debug wait command
-		If FileExists(@ScriptDir & "\EnableMBRDebug.txt") Then
-			While (FileReadLine(@ScriptDir & "\EnableMBRDebug.txt") = "wait")
-				If _SleepStatus(15000) = True Then Return
-			WEnd
-		EndIf
-
 		;Restart bot after these seconds
 		If $b_iAutoRestartDelay > 0 And __TimerDiff($g_hBotLaunchTime) > $b_iAutoRestartDelay * 1000 Then
-			If RestartBot(False) = True Then Return
+			If RestartBot(False) Then Return
 		EndIf
 
 		PrepareDonateCC()
 		If Not $g_bRunState Then Return
 		$g_bRestart = False
 		$g_bFullArmy = False
+		$g_bIsFullArmywithHeroesAndSpells = False
 		$g_iCommandStop = -1
 		If _Sleep($DELAYRUNBOT1) Then Return
 		checkMainScreen()
-		If $g_bRestart = True Then ContinueLoop
+		If $g_bRestart Then ContinueLoop
 		chkShieldStatus()
 		If Not $g_bRunState Then Return
-		If $g_bRestart = True Then ContinueLoop
+		If $g_bRestart Then ContinueLoop
 		checkObstacles() ; trap common error messages also check for reconnecting animation
-		If $g_bRestart = True Then ContinueLoop
+		If $g_bRestart Then ContinueLoop
 
-		If $g_bQuicklyFirstStart = True Then
-			$g_bQuicklyFirstStart = False
-		Else
-			$g_bQuickAttack = QuickAttack()
-		EndIf
-
-		If CheckAndroidReboot() = True Then ContinueLoop
-		If $g_bIsClientSyncError = False And $g_bIsSearchLimit = False And ($g_bQuickAttack = False) Then
-			If BotCommand() Then btnStop()
-			If _Sleep($DELAYRUNBOT2) Then Return
+		If CheckAndroidReboot() Then ContinueLoop
+		If Not $g_bIsClientSyncError And Not $g_bIsSearchLimit Then
 
 			checkMainScreen(False)
-			If $g_bRestart = True Then ContinueLoop
+			If $g_bRestart Then ContinueLoop
 			If _Sleep($DELAYRUNBOT3) Then Return
 			VillageReport()
+			If _Sleep($DELAYRUNBOT2) Then Return
+			If BotCommand() Then btnStop()
 			If Not $g_bRunState Then Return
-			If $g_bOutOfGold = True And (Number($g_aiCurrentLoot[$eLootGold]) >= Number($g_iTxtRestartGold)) Then ; check if enough gold to begin searching again
+			If $g_bOutOfGold And (Number($g_aiCurrentLoot[$eLootGold]) >= Number($g_iTxtRestartGold)) Then ; check if enough gold to begin searching again
 				$g_bOutOfGold = False ; reset out of gold flag
 				SetLog("Switching back to normal after no gold to search ...", $COLOR_SUCCESS)
 				ContinueLoop ; Restart bot loop to reset $g_iCommandStop & $g_bTrainEnabled + $g_bDonationEnabled via BotCommand()
 			EndIf
-			If $g_bOutOfElixir = True And (Number($g_aiCurrentLoot[$eLootElixir]) >= Number($g_iTxtRestartElixir)) And (Number($g_aiCurrentLoot[$eLootDarkElixir]) >= Number($g_iTxtRestartDark)) Then ; check if enough elixir to begin searching again
-				$g_bOutOfElixir = False ; reset out of gold flag
+			If $g_bOutOfElixir And (Number($g_aiCurrentLoot[$eLootElixir]) >= Number($g_iTxtRestartElixir)) And (Number($g_aiCurrentLoot[$eLootDarkElixir]) >= Number($g_iTxtRestartDark)) Then ; check if enough elixir to begin searching again
+				$g_bOutOfElixir = False ; reset out of elixir flag
 				SetLog("Switching back to normal setting after no elixir to train ...", $COLOR_SUCCESS)
 				ContinueLoop ; Restart bot loop to reset $g_iCommandStop & $g_bTrainEnabled + $g_bDonationEnabled via BotCommand()
 			EndIf
 			If _Sleep($DELAYRUNBOT5) Then Return
 			checkMainScreen(False)
-			If $g_bRestart = True Then ContinueLoop
-			Local $aRndFuncList = ['LabCheck', 'Collect', 'CheckTombs', 'ReArm', 'CleanYard']
-			While 1
-				If $g_bRunState = False Then Return
-				If $g_bRestart = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-				If UBound($aRndFuncList) > 1 Then
-					Local $Index = Random(0, UBound($aRndFuncList) - 1, 1)
-					_RunFunction($aRndFuncList[$Index])
-					_ArrayDelete($aRndFuncList, $Index)
-				Else
-					_RunFunction($aRndFuncList[0])
-					ExitLoop
-				EndIf
-				If $g_bRestart = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-			WEnd
-
-			If ($g_iCommandStop = 0 Or $g_iCommandStop = 3) And ProfileSwitchAccountEnabled() And Not $g_abDonateOnly[$g_iCurAccount] Then checkSwitchAcc()
+			If $g_bRestart Then ContinueLoop
+			Local $aRndFuncList = ['LabCheck', 'Collect', 'CheckTombs', 'CleanYard', 'CollectFreeMagicItems', 'DailyChallenge']
+			_ArrayShuffle($aRndFuncList)
+			For $Index In $aRndFuncList
+				If Not $g_bRunState Then Return
+				_RunFunction($Index)
+				If $g_bRestart Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+			Next
 
 			AddIdleTime()
-			If $g_bRunState = False Then Return
-			If $g_bRestart = True Then ContinueLoop
+			If Not $g_bRunState Then Return
+			If $g_bRestart Then ContinueLoop
 			If IsSearchAttackEnabled() Then ; if attack is disabled skip reporting, requesting, donating, training, and boosting
-				Local $aRndFuncList = ['ReplayShare', 'NotifyReport', 'DonateCC,Train', 'RequestCC', 'CollectFreeMagicItems']
-				While 1
-					If $g_bRunState = False Then Return
-					If $g_bRestart = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-					If UBound($aRndFuncList) > 1 Then
-						Local $Index = Random(0, UBound($aRndFuncList) - 1, 1)
-						_RunFunction($aRndFuncList[$Index])
-						_ArrayDelete($aRndFuncList, $Index)
-					Else
-						_RunFunction($aRndFuncList[0])
-						ExitLoop
-					EndIf
-					If CheckAndroidReboot() = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-				WEnd
+				Local $aRndFuncList = ['ReplayShare', 'NotifyReport', 'DonateCC,Train', 'RequestCC']
+				_ArrayShuffle($aRndFuncList)
+				For $Index In $aRndFuncList
+					If Not $g_bRunState Then Return
+					_RunFunction($Index)
+					If $g_bRestart Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+					If CheckAndroidReboot() Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+				Next
 				BoostEverything() ; 1st Check if is to use Training Potion
-				Local $aRndFuncList = ['BoostBarracks', 'BoostSpellFactory', 'BoostKing', 'BoostQueen', 'BoostWarden']
-				While 1
-					If $g_bRunState = False Then Return
-					If $g_bRestart = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-					If UBound($aRndFuncList) > 1 Then
-						Local $Index = Random(0, UBound($aRndFuncList) - 1, 1)
-						_RunFunction($aRndFuncList[$Index])
-						_ArrayDelete($aRndFuncList, $Index)
-					Else
-						_RunFunction($aRndFuncList[0])
-						ExitLoop
-					EndIf
-					If CheckAndroidReboot() = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-				WEnd
+				If $g_bRestart Then ContinueLoop
+				Local $aRndFuncList = ['BoostBarracks', 'BoostSpellFactory', 'BoostWorkshop', 'BoostKing', 'BoostQueen', 'BoostWarden', 'BoostChampion']
+				_ArrayShuffle($aRndFuncList)
+				For $Index In $aRndFuncList
+					If Not $g_bRunState Then Return
+					_RunFunction($Index)
+					If $g_bRestart Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+					If CheckAndroidReboot() Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+				Next
 
-				If $g_bRunState = False Then Return
-				If $g_bRestart = True Then ContinueLoop
+				If Not $g_bRunState Then Return
 				If $g_iUnbrkMode >= 1 Then
-					If Unbreakable() = True Then ContinueLoop
+					If Unbreakable() Then ContinueLoop
 				EndIf
+				If $g_bRestart Then ContinueLoop
 			EndIf
-			If ($g_iCommandStop = 3 Or $g_iCommandStop = 0) Then ; Train Donate only - force a donate cc everytime, Ignore any SkipDonate Near Full Values
-				If BalanceDonRec(True) Then DonateCC()
-			EndIf
-			Local $aRndFuncList = ['Laboratory', 'UpgradeHeroes', 'UpgradeBuilding', 'BuilderBase']
-			While 1
-				If $g_bRunState = False Then Return
-				If $g_bRestart = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-				If UBound($aRndFuncList) > 1 Then
-					$Index = Random(0, UBound($aRndFuncList) - 1, 1)
-					_RunFunction($aRndFuncList[$Index])
-					_ArrayDelete($aRndFuncList, $Index)
-				Else
-					_RunFunction($aRndFuncList[0])
-					ExitLoop
-				EndIf
-				If CheckAndroidReboot() = True Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
-			WEnd
-			If $g_bRunState = False Then Return
-			If $g_bRestart = True Then ContinueLoop
+			; Train Donate only - force a donate cc everytime
+			If ($g_iCommandStop = 3 Or $g_iCommandStop = 0) Then _RunFunction('DonateCC,Train')
+			If $g_bRestart Then ContinueLoop
+			Local $aRndFuncList = ['Laboratory', 'UpgradeHeroes', 'UpgradeBuilding']
+			_ArrayShuffle($aRndFuncList)
+			For $Index In $aRndFuncList
+				If Not $g_bRunState Then Return
+				_RunFunction($Index)
+				If $g_bRestart Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+				If CheckAndroidReboot() Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+			Next
+			; Ensure, that wall upgrade is last of the upgrades
+			Local $aRndFuncList = ['UpgradeWall', 'BuilderBase']
+			_ArrayShuffle($aRndFuncList)
+			For $Index In $aRndFuncList
+				If Not $g_bRunState Then Return
+				_RunFunction($Index)
+				If $g_bRestart Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+				If CheckAndroidReboot() Then ContinueLoop 2 ; must be level 2 due to loop-in-loop
+			Next
+			If Not $g_bRunState Then Return
+
+			If $g_bFirstStart Then SetDebugLog("First loop completed!")
+			$g_bFirstStart = False ; already finished first loop since bot started.
+
+			If ProfileSwitchAccountEnabled() And ($g_iCommandStop = 0 Or $g_iCommandStop = 3 Or $g_abDonateOnly[$g_iCurAccount]) Then checkSwitchAcc()
 			If IsSearchAttackEnabled() Then ; If attack scheduled has attack disabled now, stop wall upgrades, and attack.
-				$g_iNbrOfWallsUpped = 0
-				UpgradeWall()
-				If _Sleep($DELAYRUNBOT3) Then Return
-				If $g_bRestart = True Then ContinueLoop
-				If ProfileSwitchAccountEnabled() And $g_abDonateOnly[$g_iCurAccount] Then checkSwitchAcc()
 				Idle()
 				;$g_bFullArmy1 = $g_bFullArmy
 				If _Sleep($DELAYRUNBOT3) Then Return
@@ -899,30 +887,25 @@ Func _Idle() ;Sequence that runs until Full Army
 				$g_iCommandStop = 0
 			EndIf
 		EndIf
-		ReplayShare($g_bShareAttackEnableNow)
-		If _Sleep($DELAYIDLE1) Then Return
-		If $g_bRestart = True Then ExitLoop
-		If $iCollectCounter > $g_iCollectAtCount Then ; This is prevent from collecting all the time which isn't needed anyway
-			Local $aRndFuncList = ['Collect', 'CheckTombs', 'DonateCC', 'CleanYard']
-			While 1
-				If $g_bRunState = False Then Return
-				If $g_bRestart = True Then ExitLoop
+		If $g_bRestart Then ExitLoop
+		If Random(0, $g_iCollectAtCount - 1, 1) = 0 Then ; This is prevent from collecting all the time which isn't needed anyway, chance to run is 1/$g_iCollectAtCount
+			Local $aRndFuncList = ['Collect', 'CheckTombs', 'RequestCC', 'DonateCC', 'CleanYard']
+			_ArrayShuffle($aRndFuncList)
+			For $Index In $aRndFuncList
+				If Not $g_bRunState Then Return
+				_RunFunction($Index)
+				If $g_bRestart Then ExitLoop
 				If CheckAndroidReboot() Then ContinueLoop 2
-				If UBound($aRndFuncList) > 1 Then
-					Local $Index = Random(0, UBound($aRndFuncList) - 1, 1)
-					_RunFunction($aRndFuncList[$Index])
-					_ArrayDelete($aRndFuncList, $Index)
-				Else
-					_RunFunction($aRndFuncList[0])
-					ExitLoop
-				EndIf
-			WEnd
-			If $g_bRunState = False Then Return
-			If $g_bRestart = True Then ExitLoop
-			If _Sleep($DELAYIDLE1) Or $g_bRunState = False Then ExitLoop
-			$iCollectCounter = 0
+			Next
+			If Not $g_bRunState Then Return
+			If $g_bRestart Then ExitLoop
+			If _Sleep($DELAYIDLE1) Or Not $g_bRunState Then ExitLoop
+		ElseIf $g_bCheckDonateOften Then
+			_RunFunction('DonateCC')
+			If Not $g_bRunState Then Return
+			If $g_bRestart Then ExitLoop
+			If _Sleep($DELAYIDLE1) Or Not $g_bRunState Then ExitLoop
 		EndIf
-		$iCollectCounter = $iCollectCounter + 1
 		AddIdleTime()
 		checkMainScreen(False) ; required here due to many possible exits
 		If $g_iCommandStop = -1 Then
@@ -941,11 +924,11 @@ Func _Idle() ;Sequence that runs until Full Army
 			EndIf
 		EndIf
 		If _Sleep($DELAYIDLE1) Then Return
-		If $g_iCommandStop = 0 And $g_bTrainEnabled = True Then
+		If $g_iCommandStop = 0 And $g_bTrainEnabled Then
 			If Not ($g_bIsFullArmywithHeroesAndSpells) Then
 				If $g_iActualTrainSkip < $g_iMaxTrainSkip Then
 					If CheckNeedOpenTrain($g_sTimeBeforeTrain) Or (ProfileSwitchAccountEnabled() And $g_iActiveDonate And $g_bChkDonate) Then TrainSystem() ; force check trainsystem after donate and before switch account
-					If $g_bRestart = True Then ExitLoop
+					If $g_bRestart Then ExitLoop
 					If _Sleep($DELAYIDLE1) Then ExitLoop
 					checkMainScreen(False)
 					If Not $g_bRunState Then Return
@@ -958,8 +941,8 @@ Func _Idle() ;Sequence that runs until Full Army
 					If Not $g_bRunState Then Return
 				EndIf
 			EndIf
-			If $g_bIsFullArmywithHeroesAndSpells And $g_bTrainEnabled = True Then
-				SetLog("Army Camp is full, stop Training...", $COLOR_ACTION)
+			If $g_bIsFullArmywithHeroesAndSpells And $g_bTrainEnabled Then
+				SetLog("Army Camp is full, stop Training", $COLOR_ACTION)
 				$g_iCommandStop = 3
 			EndIf
 		EndIf
@@ -967,20 +950,18 @@ Func _Idle() ;Sequence that runs until Full Army
 		If $g_iCommandStop = -1 Then
 			DropTrophy()
 			If Not $g_bRunState Then Return
-			If $g_bRestart = True Then ExitLoop
+			If $g_bRestart Then ExitLoop
 			;If $g_bFullArmy Then ExitLoop		; Never will reach to SmartWait4Train() to close coc while Heroes/Spells not ready 'if' Army is full, so better to be commented
 			If _Sleep($DELAYIDLE1) Then ExitLoop
 			checkMainScreen(False)
 		EndIf
 		If _Sleep($DELAYIDLE1) Then Return
-		If $g_bRestart = True Then ExitLoop
-		$TimeIdle += Round(__TimerDiff($hTimer) / 1000, 2) ;In Seconds
-
-		If $g_bCanRequestCC = True Then RequestCC()
+		If $g_bRestart Then ExitLoop
 
+		$TimeIdle += Round(__TimerDiff($hTimer) / 1000, 2) ;In Seconds
 		SetLog("Time Idle: " & StringFormat("%02i", Floor(Floor($TimeIdle / 60) / 60)) & ":" & StringFormat("%02i", Floor(Mod(Floor($TimeIdle / 60), 60))) & ":" & StringFormat("%02i", Floor(Mod($TimeIdle, 60))))
 
-		If $g_bOutOfGold = True Or $g_bOutOfElixir = True Then Return ; Halt mode due low resources, only 1 idle loop
+		If $g_bOutOfGold Or $g_bOutOfElixir Then Return ; Halt mode due low resources, only 1 idle loop
 
 		If ProfileSwitchAccountEnabled() Then checkSwitchAcc() ; Forced to switch when in halt attack mode
 
@@ -989,7 +970,7 @@ Func _Idle() ;Sequence that runs until Full Army
 		If $g_iCommandStop = -1 Then ; Check if closing bot/emulator while training and not in halt mode
 			SmartWait4Train()
 			If Not $g_bRunState Then Return
-			If $g_bRestart = True Then ExitLoop ; if smart wait activated, exit to runbot in case user adjusted GUI or left emulator/bot in bad state
+			If $g_bRestart Then ExitLoop ; if smart wait activated, exit to runbot in case user adjusted GUI or left emulator/bot in bad state
 		EndIf
 
 	WEnd
@@ -1000,14 +981,14 @@ Func AttackMain() ;Main control for attack functions
 	; getArmyTroopCapacity(True, True)
 	ClickP($aAway, 1, 0, "#0000") ;Click Away to prevent any pages on top
 	If IsSearchAttackEnabled() Then
-		If (IsSearchModeActive($DB) And checkCollectors(True, False)) Or IsSearchModeActive($LB) Or IsSearchModeActive($TS) Then
-            If ProfileSwitchAccountEnabled() And ($g_aiAttackedCountSwitch[$g_iCurAccount] <= $g_aiAttackedCount - 2) Then checkSwitchAcc()
-			If $g_bUseCCBalanced = True Then ;launch profilereport() only if option balance D/R it's activated
+		If (IsSearchModeActive($DB) And checkCollectors(True, False)) Or IsSearchModeActive($LB) Then
+			If ProfileSwitchAccountEnabled() And ($g_aiAttackedCountSwitch[$g_iCurAccount] <= $g_aiAttackedCount - 2) Then checkSwitchAcc()
+			If $g_bUseCCBalanced Then ;launch profilereport() only if option balance D/R is activated
 				ProfileReport()
 				If Not $g_bRunState Then Return
 				If _Sleep($DELAYATTACKMAIN1) Then Return
 				checkMainScreen(False)
-				If $g_bRestart = True Then Return
+				If $g_bRestart Then Return
 			EndIf
 			If $g_bDropTrophyEnable And Number($g_aiCurrentLoot[$eLootTrophy]) > Number($g_iDropTrophyMax) Then ;If current trophy above max trophy, try drop first
 				DropTrophy()
@@ -1023,30 +1004,30 @@ Func AttackMain() ;Main control for attack functions
 			EndIf
 			_ClanGames()
 			ClickP($aAway, 1, 0, "#0000") ;Click Away to prevent any pages on top
+			If $g_bUpdateSharedPrefs Then PullSharedPrefs()
 			PrepareSearch()
 			If Not $g_bRunState Then Return
-			If $g_bOutOfGold = True Then Return ; Check flag for enough gold to search
-			If $g_bRestart = True Then Return
+			If $g_bOutOfGold Then Return ; Check flag for enough gold to search
+			If $g_bRestart Then Return
 			VillageSearch()
-			If $g_bOutOfGold = True Then Return ; Check flag for enough gold to search
+			If $g_bOutOfGold Then Return ; Check flag for enough gold to search
 			If Not $g_bRunState Then Return
-			If $g_bRestart = True Then Return
+			If $g_bRestart Then Return
 			PrepareAttack($g_iMatchMode)
 			If Not $g_bRunState Then Return
-			If $g_bRestart = True Then Return
+			If $g_bRestart Then Return
 			Attack()
 			If Not $g_bRunState Then Return
-			If $g_bRestart = True Then Return
+			If $g_bRestart Then Return
 			ReturnHome($g_bTakeLootSnapShot)
 			If Not $g_bRunState Then Return
 			If _Sleep($DELAYATTACKMAIN2) Then Return
 			Return True
 		Else
-			SetLog("No one of search condition match:", $COLOR_WARNING)
-			SetLog("Waiting on troops, heroes and/or spells according to search settings", $COLOR_WARNING)
+			SetLog("None of search condition match:", $COLOR_WARNING)
+			SetLog("Search, Trophy or Army Camp % are out of range in search setting", $COLOR_WARNING)
 			$g_bIsSearchLimit = False
 			$g_bIsClientSyncError = False
-			$g_bQuickAttack = False
 			If ProfileSwitchAccountEnabled() Then checkSwitchAcc()
 			SmartWait4Train()
 		EndIf
@@ -1077,47 +1055,17 @@ Func Attack() ;Selects which algorithm
 	$g_bAttackActive = False
 EndFunc   ;==>Attack
 
-
-Func QuickAttack()
-
-	Local $quicklymilking = 0
-	Local $quicklythsnipe = 0
-
-	getArmyTroopCapacity(True, True)
-
-	If ($g_aiAttackAlgorithm[$DB] = 2 And IsSearchModeActive($DB)) Or (IsSearchModeActive($TS)) Then
-		VillageReport()
-	EndIf
-
-	$g_aiCurrentLoot[$eLootTrophy] = getTrophyMainScreen($aTrophies[0], $aTrophies[1])
-	If ($g_bDropTrophyEnable And Number($g_aiCurrentLoot[$eLootTrophy]) > Number($g_iDropTrophyMax)) Then
-		If $g_bDebugSetlog Then SetDebugLog("No quickly re-attack, need to drop tropies", $COLOR_DEBUG)
-		Return False ;need to drop tropies
-	EndIf
-
-	If $g_aiAttackAlgorithm[$DB] = 2 And IsSearchModeActive($DB) Then
-		If Int($g_CurrentCampUtilization) >= $g_iTotalCampSpace * $g_aiSearchCampsPct[$DB] / 100 And $g_abSearchCampsEnable[$DB] Then
-			If $g_bDebugSetlog Then SetDebugLog("Milking: Quickly re-attack " & Int($g_CurrentCampUtilization) & " >= " & $g_iTotalCampSpace & " * " & $g_aiSearchCampsPct[$DB] & "/100 " & "= " & $g_iTotalCampSpace * $g_aiSearchCampsPct[$DB] / 100, $COLOR_DEBUG)
-			Return True ;milking attack OK!
-		Else
-			If $g_bDebugSetlog Then SetDebugLog("Milking: No Quickly re-attack:  cur. " & Int($g_CurrentCampUtilization) & "  need " & $g_iTotalCampSpace * $g_aiSearchCampsPct[$DB] / 100 & " firststart = " & ($g_bQuicklyFirstStart), $COLOR_DEBUG)
-			Return False ;milking attack no restart.. no enough army
-		EndIf
-	EndIf
-
-	If IsSearchModeActive($TS) Then
-		If Int($g_CurrentCampUtilization) >= $g_iTotalCampSpace * $g_aiSearchCampsPct[$TS] / 100 And $g_abSearchCampsEnable[$TS] Then
-			If $g_bDebugSetlog Then SetDebugLog("THSnipe: Quickly re-attack " & Int($g_CurrentCampUtilization) & " >= " & $g_iTotalCampSpace & " * " & $g_aiSearchCampsPct[$TS] & "/100 " & "= " & $g_iTotalCampSpace * $g_aiSearchCampsPct[$TS] / 100, $COLOR_DEBUG)
-			Return True ;ts snipe attack OK!
-		Else
-			If $g_bDebugSetlog Then SetDebugLog("THSnipe: No Quickly re-attack:  cur. " & Int($g_CurrentCampUtilization) & "  need " & $g_iTotalCampSpace * $g_aiSearchCampsPct[$TS] / 100 & " firststart = " & ($g_bQuicklyFirstStart), $COLOR_DEBUG)
-			Return False ;ts snipe no restart... no enough army
-		EndIf
-	EndIf
-
-EndFunc   ;==>QuickAttack
-
 Func _RunFunction($action)
+	FuncEnter(_RunFunction)
+	; ensure that builder base flag is false
+	$g_bStayOnBuilderBase = False
+	Local $Result = __RunFunction($action)
+	; ensure that builder base flag is false
+	$g_bStayOnBuilderBase = False
+	Return FuncReturn($Result)
+EndFunc   ;==>_RunFunction
+
+Func __RunFunction($action)
 	SetDebugLog("_RunFunction: " & $action & " BEGIN", $COLOR_DEBUG2)
 	Switch $action
 		Case "Collect"
@@ -1128,9 +1076,6 @@ Func _RunFunction($action)
 			_Sleep($DELAYRUNBOT3)
 		Case "CleanYard"
 			CleanYard()
-		Case "ReArm"
-			ReArm()
-			_Sleep($DELAYRUNBOT3)
 		Case "ReplayShare"
 			ReplayShare($g_bShareAttackEnableNow)
 			_Sleep($DELAYRUNBOT3)
@@ -1139,21 +1084,24 @@ Func _RunFunction($action)
 			_Sleep($DELAYRUNBOT3)
 		Case "DonateCC"
 			If $g_iActiveDonate And $g_bChkDonate Then
-				If SkipDonateNearFullTroops(True) = False And BalanceDonRec(True) Then DonateCC()
+				; if in "Halt/Donate" don't skip near full army
+				If (Not SkipDonateNearFullTroops(True) Or $g_iCommandStop = 3 Or $g_iCommandStop = 0) And BalanceDonRec(True) Then DonateCC()
 				If _Sleep($DELAYRUNBOT1) = False Then checkMainScreen(False)
 			EndIf
 		Case "DonateCC,Train"
 			If $g_iActiveDonate And $g_bChkDonate Then
 				If $g_bFirstStart Then
 					getArmyTroopCapacity(True, False)
+					If _Sleep($DELAYRESPOND) Then Return
 					getArmySpellCapacity(False, True)
+					If _Sleep($DELAYRESPOND) Then Return
 				EndIf
-				If SkipDonateNearFullTroops(True) = False And BalanceDonRec(True) Then DonateCC()
+				; if in "Halt/Donate" don't skip near full army
+				If (Not SkipDonateNearFullTroops(True) Or $g_iCommandStop = 3 Or $g_iCommandStop = 0) And BalanceDonRec(True) Then DonateCC()
 			EndIf
-			If _Sleep($DELAYRUNBOT1) = False Then checkMainScreen(False)
+			If Not _Sleep($DELAYRUNBOT1) Then checkMainScreen(False)
 			If $g_bTrainEnabled Then ; check for training enabled in halt mode
 				If $g_iActualTrainSkip < $g_iMaxTrainSkip Then
-					;Train()
 					TrainSystem()
 					_Sleep($DELAYRUNBOT1)
 				Else
@@ -1163,7 +1111,9 @@ Func _RunFunction($action)
 						$g_iActualTrainSkip = 0
 					EndIf
 					CheckOverviewFullArmy(True, False) ; use true parameter to open train overview window
+					If _Sleep($DELAYRESPOND) Then Return
 					getArmySpells()
+					If _Sleep($DELAYRESPOND) Then Return
 					getArmyHeroCount(False, True)
 				EndIf
 			Else
@@ -1171,53 +1121,96 @@ Func _RunFunction($action)
 			EndIf
 		Case "BoostBarracks"
 			BoostBarracks()
+			_Sleep($DELAYRESPOND)
 		Case "BoostSpellFactory"
 			BoostSpellFactory()
+			_Sleep($DELAYRESPOND)
+		Case "BoostWorkshop"
+			BoostWorkshop()
+			_Sleep($DELAYRESPOND)
 		Case "BoostKing"
 			BoostKing()
+			_Sleep($DELAYRESPOND)
 		Case "BoostQueen"
 			BoostQueen()
+			_Sleep($DELAYRESPOND)
 		Case "BoostWarden"
 			BoostWarden()
+			_Sleep($DELAYRESPOND)
+		Case "BoostChampion"
+			BoostChampion()
+			_Sleep($DELAYRESPOND)
 		Case "BoostEverything"
 			BoostEverything()
+			_Sleep($DELAYRESPOND)
+		Case "DailyChallenge"
+			DailyChallenges()
+			_Sleep($DELAYRUNBOT3)
 		Case "LabCheck"
 			LabGuiDisplay()
 			_Sleep($DELAYRUNBOT3)
 		Case "RequestCC"
 			RequestCC()
-			If _Sleep($DELAYRUNBOT1) = False Then checkMainScreen(False)
+			If Not _Sleep($DELAYRUNBOT1) Then checkMainScreen(False)
 		Case "Laboratory"
 			Laboratory()
-			If _Sleep($DELAYRUNBOT3) = False Then checkMainScreen(False)
+			If Not _Sleep($DELAYRUNBOT3) Then checkMainScreen(False)
 		Case "UpgradeHeroes"
 			UpgradeHeroes()
 			_Sleep($DELAYRUNBOT3)
 		Case "UpgradeBuilding"
 			UpgradeBuilding()
-			_Sleep($DELAYRUNBOT3)
+			If _Sleep($DELAYRUNBOT3) Then Return
 			AutoUpgrade()
 			_Sleep($DELAYRUNBOT3)
+		Case "UpgradeWall"
+			$g_iNbrOfWallsUpped = 0
+			UpgradeWall()
+			_Sleep($DELAYRUNBOT3)
 		Case "BuilderBase"
-			If isOnBuilderBase() Or (($g_bChkCollectBuilderBase Or $g_bChkStartClockTowerBoost Or $g_iChkBBSuggestedUpgrades) And SwitchBetweenBases()) Then
-				CollectBuilderBase()
+			If isOnBuilderBase() Or (($g_bChkCollectBuilderBase Or $g_bChkStartClockTowerBoost Or $g_iChkBBSuggestedUpgrades or $g_bChkEnableBBAttack) And SwitchBetweenBases()) Then
+				$g_bStayOnBuilderBase = True
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
 				BuilderBaseReport()
-				CleanBBYard()
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
+				CollectBuilderBase()
+				AttackBB()
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If $g_bRestart = True Then Return
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
 				StartClockTowerBoost()
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
+				StarLaboratory()
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
+				CleanBBYard()
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
 				MainSuggestedUpgradeCode()
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
+				BuilderBaseReport()
+				If _Sleep($DELAYRUNBOT3) Then Return
+				If checkObstacles() Then Return
 				; switch back to normal village
 				SwitchBetweenBases()
+				$g_bStayOnBuilderBase = False
 			EndIf
 			_Sleep($DELAYRUNBOT3)
 		Case "CollectFreeMagicItems"
 			CollectFreeMagicItems()
+			_Sleep($DELAYRUNBOT3)
 		Case ""
 			SetDebugLog("Function call doesn't support empty string, please review array size", $COLOR_ERROR)
 		Case Else
 			SetLog("Unknown function call: " & $action, $COLOR_ERROR)
 	EndSwitch
 	SetDebugLog("_RunFunction: " & $action & " END", $COLOR_DEBUG2)
-EndFunc   ;==>_RunFunction
+EndFunc   ;==>__RunFunction
 
 Func FirstCheck()
 
@@ -1233,13 +1226,13 @@ Func FirstCheck()
 	VillageReport()
 	If Not $g_bRunState Then Return
 
-	If $g_bOutOfGold = True And (Number($g_aiCurrentLoot[$eLootGold]) >= Number($g_iTxtRestartGold)) Then ; check if enough gold to begin searching again
+	If $g_bOutOfGold And (Number($g_aiCurrentLoot[$eLootGold]) >= Number($g_iTxtRestartGold)) Then ; check if enough gold to begin searching again
 		$g_bOutOfGold = False ; reset out of gold flag
 		SetLog("Switching back to normal after no gold to search ...", $COLOR_SUCCESS)
 		Return ; Restart bot loop to reset $g_iCommandStop & $g_bTrainEnabled + $g_bDonationEnabled via BotCommand()
 	EndIf
 
-	If $g_bOutOfElixir = True And (Number($g_aiCurrentLoot[$eLootElixir]) >= Number($g_iTxtRestartElixir)) And (Number($g_aiCurrentLoot[$eLootDarkElixir]) >= Number($g_iTxtRestartDark)) Then ; check if enough elixir to begin searching again
+	If $g_bOutOfElixir And (Number($g_aiCurrentLoot[$eLootElixir]) >= Number($g_iTxtRestartElixir)) And (Number($g_aiCurrentLoot[$eLootDarkElixir]) >= Number($g_iTxtRestartDark)) Then ; check if enough elixir to begin searching again
 		$g_bOutOfElixir = False ; reset out of gold flag
 		SetLog("Switching back to normal setting after no elixir to train ...", $COLOR_SUCCESS)
 		Return ; Restart bot loop to reset $g_iCommandStop & $g_bTrainEnabled + $g_bDonationEnabled via BotCommand()
@@ -1247,7 +1240,7 @@ Func FirstCheck()
 
 	If _Sleep($DELAYRUNBOT5) Then Return
 	checkMainScreen(False)
-	If $g_bRestart = True Then Return
+	If $g_bRestart Then Return
 
 	If BotCommand() Then btnStop()
 
@@ -1259,17 +1252,15 @@ Func FirstCheck()
 		SetDebugLog("Are you ready? " & String($g_bIsFullArmywithHeroesAndSpells))
 		If $g_bIsFullArmywithHeroesAndSpells Then
 			; Just in case of new profile! or BotDetectFirstTime() failed on Initiate()
-			If (isInsideDiamond($g_aiTownHallPos) = False) Then
-				BotDetectFirstTime()
-			EndIf
+			If Not isInsideDiamond($g_aiTownHallPos) Then BotDetectFirstTime()
 			; Now the bot can attack
 			If $g_iCommandStop <> 0 And $g_iCommandStop <> 3 Then
-				Setlog("Before any other routine let's attack!!", $COLOR_INFO)
+				Setlog("Before any other routine let's attack!", $COLOR_INFO)
 				If Not $g_bRunState Then Return
 				AttackMain()
 				$g_bSkipFirstZoomout = False
-				If $g_bOutOfGold = True Then
-					SetLog("Switching to Halt Attack, Stay Online/Collect mode ...", $COLOR_ERROR)
+				If $g_bOutOfGold Then
+					SetLog("Switching to Halt Attack, Stay Online/Collect mode", $COLOR_ERROR)
 					$g_bFirstStart = True ; reset First time flag to ensure army balancing when returns to training
 					Return
 				EndIf
